name: Backend Continuous Deployment

on: 
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'

env:
  ECR_REPOSITORY: backend
  EKS_CLUSTER_NAME: cluster 
  AWS_REGION: us-east-1

defaults:
  run:
    working-directory: starter/backend
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: set up python 
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: cache pipenv
        id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ./starter/backend/.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('./starter/backend/Pipfile.lock') }}

      - name: install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        env:
          PIPENV_VENV_IN_PROJECT: 1
        run: pipenv install --dev

      - name: run lint
        run: pipenv run lint     
        continue-on-error: false          

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: set up python 
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: cache pipenv
        id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ./starter/backend/.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('./starter/backend/Pipfile.lock') }}

      - name: install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        env:
          PIPENV_VENV_IN_PROJECT: 1
        run: |
          pipenv install --dev

      - name: run lint
        run: |
          pipenv run test     
        continue-on-error: false      

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}       

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1      
        with:
          mask-password: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:starter/backend"
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          provenance: false

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ env.AWS_REGION }}

      - name: Deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd k8s
          kustomize edit set image backend=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          kustomize build | kubectl apply -f -          
